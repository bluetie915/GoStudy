package main

import "fmt"
//演示字符类型使用
func main(){
	//golang没有专门的字符类型，如果要存储单个字符，一般用byte来保存
	//go的字符串是由单个字节连接起来的，也就是说对于传统的字符串是由字符组成的
	//而go的字符串不同，它是由字节络组成的
	
	var c1 byte = 'a'
	var c2 byte = '0'
	//当我们直接输出byte值，就是输出了的对应的字符的码值
	fmt.Println("c1=",c1,"c2=",c2)

	//如果我们希望输出对应字符，需要使用格式化输出
	fmt.Printf("c1=%c c2=%c",c1,c2)
	
	//一个汉字不能用byte存储，可以用int保存
	var c3 int16 = '成'
	fmt.Printf("\nc3=%c c3对应的码值=%d",c3,c3)


	var c4 = 25104
	fmt.Printf("\nc4=%c",c4)

	var n1 = 10 + 'a'
	fmt.Println("\nn1=",n1)

	/* 
		1>字符常量是用单引号括起来的单个字符
		2>go中允许使用转义字符'\n'来将其后的字符转变为特殊字符型常量
		3>go语言的字符使用UTF-8编码
		4>在go中，字符的本质是一个整数，直接输出时，是该字符对应的UTF-8编码的值
		5>可以给某个变量赋一个数字，然后按格式化输出时%c
		6>字符类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码
	*/

	//存储：字符	==>	码值	==>	二进制	==>	存储
	//读取：二进制	==> 码值	==>	字符	==>	读取
}